#fold {
	background-repeat: no-repeat;
	background-size: cover;
	width: 100%;
  font-family: 'Open Sans', sans-serif;
	/*background-attachment: fixed;
	/*position: relative;*/
}

#fold-registrate {
	/*sin height*/
	background-image: url(../img/portada.jpg);
	background-repeat: no-repeat;
	background-size: cover;
	width: 100%;
	background-attachment: fixed;
}

#fold-login {
  background-image: url(../img/portada.jpg);
  background-repeat: no-repeat;
  background-size: cover;
  width: 100%;
  height: 643px;
  background-attachment: fixed;
}

#fold .fold-title {
	position: absolute;
	top: 42%;
	text-align: center;
	width: 100%;
	color: #FD288F;
	text-transform: uppercase;
}

/*#fold .fold-title a {
	text-decoration: none;
	color: #fff;
	padding: 14px 21px;
	background: #FD2800;
	border-radius: 5px;
}*/

#fold .fold-title h1 {
	margin-bottom: 42px;
	color: #FD2879;
	font-size: 350%;
	font-weight: 100;
	letter-spacing: -1px;
}

#fold .fold-title .btn {
  color: steelblue;
  background: transparent;
  border: 2px solid white;
}

#fold .fold-title .btn:hover {
  color: white;
  background: steelblue;
}

/*#fold .fold-title a:hover {
	background: tomato;
}*/

#fold a {
	font-family:'Montserrat', sans-serif;
}

#fold .fold-title .text-center img:hover{
	opacity: 0.1;
}








 /**
 * See: http://www.css-101.org/articles/ken-burns_effect/css-transition.php
 */

/**
 * Styling the container (the wrapper)
 * 
 * position is used to make this box a containing block (it becomes a reference for its absolutely positioned children). overflow will hide part of the images moving outside of the box.
 */

#slideshow {
    position:relative;
    width: 100%;
    height: 650px;
    overflow:hidden;
}

/**
 * Styling the images
 *
 * position:absolute is to put all images in a stack. Dimensions are set to increase the size of these images so their edges do not appear in the parent box when we move them inside the said box.
 * Because the images are now larger than their parent container, we use top, left and margin values to align them in the center of the box.
 * Finally, we set the transition (property and duration). Note that duration values are different for opacity and transform as we want the "fade-in" effect to be faster than the "panning" effect.
 */

#slideshow img {
    position:absolute;
    width: 100%;
    height: 100%;
   /* top:50%;
    left:50%;
    margin-left:-400px;
    margin-top:-200px;*/
    opacity:0;
    -webkit-transition-property: opacity, -webkit-transform;
    -webkit-transition-duration: 3s, 10s;
       -moz-transition-property: opacity, -moz-transform;
       -moz-transition-duration: 3s, 10s;
        -ms-transition-property: opacity, -ms-transform;
        -ms-transition-duration: 3s, 10s;
         -o-transition-property: opacity, -o-transform;
         -o-transition-duration: 3s, 10s;
            transition-property: opacity, transform;
            transition-duration: 3s, 10s;
            
}

/**
 * We change the point of origin using four corners so images do not move in the same direction. 
 * This technique allows us to create various paths while applying the same translate() values to all images (see the 'fx' class further below).
 */

#slideshow img  {
    -webkit-transform-origin: bottom left;
       -moz-transform-origin: bottom left;
        -ms-transform-origin: bottom left;
         -o-transform-origin: bottom left;
            transform-origin: bottom left;
}

#slideshow :nth-child(2n+1) {
    -webkit-transform-origin: top right;
       -moz-transform-origin: top right;
        -ms-transform-origin: top right;
         -o-transform-origin: top right;
            transform-origin: top right;
}

#slideshow :nth-child(3n+1) {
    -webkit-transform-origin: top left;
       -moz-transform-origin: top left;
        -ms-transform-origin: top left;
         -o-transform-origin: top left;
            transform-origin: top left;
}
#slideshow :nth-child(4n+1) {
  -webkit-transform-origin: bottom right;
     -moz-transform-origin: bottom right;
      -ms-transform-origin: bottom right;
       -o-transform-origin: bottom right;
          transform-origin: bottom right;
}

/**
 * Because of the stacking context, we need to make sure that the first image (in source) is not hidden by the last one. 
 * The rule below moves all images past the second one down the stack. 
 * This is because the second image needs to show on top of the first one when it transitions in.
 */

#slideshow .fx:first-child + img ~ img  {
    z-index:-1;
}

/**
 * Because images are styled with a different point of origin, the following rule will create different panning effects.
 */

#slideshow .fx {
    opacity:1;
    -webkit-transform: scale(1.1);
       -moz-transform: scale(1.1);
        -ms-transform: scale(1.1);
         -o-transform: scale(1.1);
            transform: scale(1.1);
}